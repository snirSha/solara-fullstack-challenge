version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: solara
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # inside communication
      - "15672:15672"   # management interface
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  nestjs-service:
    build: ./nestjs-service
    command: npm run start:dev
    volumes:
      - ./nestjs-service:/app
      - ./output:/app/output  # Mount output folder for serving images
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGIN=http://localhost:4200
    depends_on:
      - postgres
      - python-generator
      - rabbitmq
    networks:
      - app-network

  python-generator:
    build: ./python-generator
    command: python app.py
    volumes:
      - ./python-generator:/app
      - ./output:/app/output
    environment:
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  python-worker:
    build: ./python-worker
    command: python main.py
    volumes:
      - ./python-worker:/app
      - ./output:/app/output
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - app-network

  angular-frontend:
    build:
      context: ./angular-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "4200:4200"
    environment:
      - API_URL=http://localhost:3000
    depends_on:
      - nestjs-service
    networks:
      - app-network

volumes:
  postgres-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge